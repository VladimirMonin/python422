"""
Lesson 35. Знакомство с ООП
- Правила нейминга. UpperCamelCase  (похоже на переменные)
- Class - ключевое слово для создания класса
"""

"""
Атрибут класса - это переменная, которая определяется внутри класса, но вне любого метода. Она общая для всех экземпляров класса.

Когда мы меняем значение атрибута класса (например, Cat.name = 'Безымянный барсик'), это изменение отражается на всех экземплярах класса, которые не имеют собственного атрибута с таким же именем.

Т.е. кличка может быть одна на всех, или у каждого своя.

Однако, если мы присваиваем значение атрибуту конкретного экземпляра (например, cat1.name = 'Барсик'), мы создаем атрибут экземпляра. Этот атрибут экземпляра имеет приоритет над атрибутом класса с тем же именем.

Таким образом, когда мы обращаемся к атрибуту экземпляра, Python сначала ищет его в самом экземпляре. Если атрибут не найден, поиск продолжается в классе. Поэтому изменение атрибута класса не влияет на экземпляры, у которых уже есть собственный атрибут с таким именем.

Это позволяет иметь общие значения для всех экземпляров класса, но при необходимости переопределять их для конкретных экземпляров.
"""


class Cat:
    # Атрибут класса
    clinic = 'Котоклиника'
    def __init__(self, name: str, age: int, weight: float, breed: str = 'дворянин'):
        # Атрибут экземпляра - данные, которые будут принадлежать конкретному экземпляру класса. И только ему.
        self.name =name
        self.age= age
        self.weight = weight
        self.breed = breed

    def __str__(self):
        """
        Возвращает строковое преедставление объекта класса. (для принта)
        Формат: Имя: Мурзик, Возраст: 3, Вес: 4, Порода: дворянин, клиника: КотоклиникаИмя: Мурзик, Возраст: 3, Вес: 4, Порода: дворянин, клиника: Котоклиника
        """
        return f'Имя: {self.name}\nВозраст: {self.age}\nВес: {self.weight}\nПорода: {self.breed}\nКлиника: {self.clinic}\n{"-"*30}'
    

    def get_voise(self):
        """
        Это метод экземпляра. Потому что на входе self и мы работаем с данными каждого
        конкретного экземпляра класса.
        """
        print(f'{self.name} говорит: Мяу!')

    def get_human_age(self, multiplier: int):
        """
        Метод который позволяет узнать возраст котика в годах человека.
        Принимает на вход значение коэфициента умножения (6 или 7).
        """
        return self.age * multiplier

cat1 = Cat('Мурзик', 3, 4)
cat2 = Cat('Барсик', 5, 8)
cat3 = Cat('Лео', 4, 5, 'Свинкс')

print(cat1.get_human_age(6))

cats = [cat1, cat2, cat3]

# cat1.get_voise()

[cat.get_voise() for cat in cats]
